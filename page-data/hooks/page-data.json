{
    "componentChunkName": "component---src-templates-lesson-template-js",
    "path": "/hooks",
    "result": {"data":{"markdownRemark":{"html":"<p>Now we want to make it so you can modify what your search parameters are. Let's make a new route called SearchParams.js and have it accept these search parameters.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">SearchParams</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> location <span class=\"token operator\">=</span> <span class=\"token string\">\"Seattle, WA\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"search-params\"</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>form<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>label htmlFor<span class=\"token operator\">=</span><span class=\"token string\">\"location\"</span><span class=\"token operator\">></span>\n          Location\n          <span class=\"token operator\">&lt;</span>input id<span class=\"token operator\">=</span><span class=\"token string\">\"location\"</span> value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>location<span class=\"token punctuation\">}</span> placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"Location\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>label<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button<span class=\"token operator\">></span>Submit<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> SearchParams<span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>🚨 ESLint is currently failing. We'll fix it in a sec.</p>\n</blockquote>\n<p>Now add it to your routes:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// delete Pet import, and add SearchParams</span>\n<span class=\"token keyword\">import</span> SearchParams <span class=\"token keyword\">from</span> <span class=\"token string\">\"./SearchParams\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// in App.js, replace all the Pets</span>\n<span class=\"token operator\">&lt;</span>SearchParams <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now navigate to <a href=\"http://localhost:1234\">http://localhost:1234</a> and see that your have one input box that says \"Seattle, WA\". Try and type in it. You'll see that you can't modify it. Why? Let's think about how React works: when you type in the input, React detects that a DOM event happens. When that happens, React thinks <em>something</em> may have changed so it runs a re-render. Providing your render functions are fast, this is a very quick operation. It then diffs what's currently there and what its render pass came up with. It then updates the minimum amount of DOM necessary.</p>\n<p>Notice we're using <code class=\"language-text\">className</code> instead of <code class=\"language-text\">class</code> on the HTML element for CSS classes. This is because <code class=\"language-text\">class</code> is a reserved word in JS and JSX is still just JS. So instead they opted to use <code class=\"language-text\">className</code> which is the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/className\">name of the JS API</a> for interacting with class names.</p>\n<p>Like <code class=\"language-text\">className</code>, <code class=\"language-text\">htmlFor</code> is used because <code class=\"language-text\">for</code> is a reserved word in JS.</p>\n<p>So if we type in our input and it re-renders, what gets out in the <code class=\"language-text\">input</code> tag? Well, its value is tied to <code class=\"language-text\">location</code> and nothing changed that, so it remains the same. In other words, two way data binding is <em>not</em> free in React. I say this is a feature because it makes you explicit on how you handle your data. Let's go make it work.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// in SearchParams.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// replace location</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>location<span class=\"token punctuation\">,</span> updateLocation<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Seattle, WA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// replace input</span>\n<span class=\"token operator\">&lt;</span>input\n  id<span class=\"token operator\">=</span><span class=\"token string\">\"location\"</span>\n  value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>location<span class=\"token punctuation\">}</span>\n  placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"Location\"</span>\n  onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">updateLocation</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>This is called a hook. Other frameworks like Vue have started adopting it as well.</li>\n<li>A hook called such (in my head) because it's a hook that gets caught every time the render function gets called. Because the hooks get called in the same order every single time, they'll always point to the same piece of state. Because of that they can be stateful: you can keep pieces of mutable state using hooks and then modify them later using their provided updater functions.</li>\n<li>An <em>absolutely key</em> concept for you to grasp is hooks rely on this strict ordering. As such, <strong>do not put hooks inside if statements or loops</strong>. If you do, you'll have insane bugs that involve <code class=\"language-text\">useState</code> returning <em>the wrong state</em>. If you see <code class=\"language-text\">useState</code> returning the wrong piece of state, this is likely what you did.</li>\n<li>Because the previous point is so absolutely critical, the React team has provided us with a lint rule that help us not fall into that trap. That lint rule relies on us, the developers, to follow the convention of calling our hooks <code class=\"language-text\">useXxxxxx</code>. If you're willing to do that, the lint rules will guard you from calling the hooks out of order.</li>\n<li>The argument given to <code class=\"language-text\">useState</code> is the default value. In our case, we gave it <code class=\"language-text\">\"Seattle, WA\"</code> as our default value.</li>\n<li><code class=\"language-text\">useState</code> returns to us an array with two things in it: the current value of that state and a function to update that function. We're using a feature of JavaScript called destructuring to get both of those things out of the array.</li>\n<li>We use the <code class=\"language-text\">updateLocation</code> function in the <code class=\"language-text\">onChange</code> attribute of the input. Every time the input is typed into, it's going to call that function which calls <code class=\"language-text\">updateLocation</code> with what has been typed into the input. When <code class=\"language-text\">updateLocation</code> is called, React knows that its state has been modified and kicks off a re-render.</li>\n<li>You can make your own custom hooks; <code class=\"language-text\">useState</code> is just one of many.</li>\n<li>Historically, React has been written using <code class=\"language-text\">class</code>es with state being on the instance of the component. This is still a supported pattern in React. We'll see how to do it later.</li>\n</ul>\n<p>Let's add the ESLint rule. Run <code class=\"language-text\">npm install -D eslint-plugin-react-hooks@4.2.0</code>. Add this to ESLint:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    …\n    <span class=\"token string\">\"plugin:react-hooks/recommended\"</span><span class=\"token punctuation\">,</span>\n    …\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>The order of extends isn't particularly important to us <em>except</em> the Prettier ones <em>must</em> be last. Those serve to turn off rules the others ones enable.</p>\n</blockquote>\n<p>Let's next make the animal drop down.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// under the imports</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">ANIMALS</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"bird\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cat\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dog\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"rabbit\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"reptile\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// under location</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>animal<span class=\"token punctuation\">,</span> updateAnimal<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// under the location label</span>\n<span class=\"token operator\">&lt;</span>label htmlFor<span class=\"token operator\">=</span><span class=\"token string\">\"animal\"</span><span class=\"token operator\">></span>\n  Animal\n  <span class=\"token operator\">&lt;</span>select\n    id<span class=\"token operator\">=</span><span class=\"token string\">\"animal\"</span>\n    value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>animal<span class=\"token punctuation\">}</span>\n    onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">updateAnimal</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    onBlur<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">updateAnimal</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>option <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span><span class=\"token constant\">ANIMALS</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">animal</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>option key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>animal<span class=\"token punctuation\">}</span> value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>animal<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>animal<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>option<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>select<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>label<span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>You can use <code class=\"language-text\">useState</code> as many times as you need for various pieces of state! Again, this is why ordering is important because React relies on <code class=\"language-text\">useState</code> to be called in strictly the same order every time so it can give you the same piece of state.</li>\n<li>Similar to above. We're using <code class=\"language-text\">onChange</code> and <code class=\"language-text\">onBlur</code> because it makes it more accessible.</li>\n</ul>\n<p>Let's make a third dropdown so you can select a breed as well as an animal.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// under your other state inside the component</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>breed<span class=\"token punctuation\">,</span> updateBreed<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> breeds <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// under the animal label</span>\n<span class=\"token operator\">&lt;</span>label htmlFor<span class=\"token operator\">=</span><span class=\"token string\">\"breed\"</span><span class=\"token operator\">></span>\n  Breed\n  <span class=\"token operator\">&lt;</span>select\n    disabled<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token operator\">!</span>breeds<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">}</span>\n    id<span class=\"token operator\">=</span><span class=\"token string\">\"breed\"</span>\n    value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>breed<span class=\"token punctuation\">}</span>\n    onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">updateBreed</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    onBlur<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">updateBreed</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>option <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span>breeds<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">breed</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>option key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>breed<span class=\"token punctuation\">}</span> value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>breed<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>breed<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>option<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>select<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>label<span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>So now we have a breed dropdown. The only really new thing we did was use the <code class=\"language-text\">disabled</code> property to disable the dropdown when you don't have any breeds. We're going to use the Petfinder API to request breeds based on the animal selected. If you select <code class=\"language-text\">dog</code>, you want to see poodles, labradors, and chihuahuas and parrots, tabbies, and Maine coons. Petfinder has and endpoint that if you give it a valid animal. We'll show you how to do that in the next lesson with effects.</p>\n<blockquote>\n<p>🏁 <a href=\"https://github.com/btholt/citr-v6-project/tree/master/04-hooks\">Click here to see the state of the project up until now: 04-hooks</a></p>\n</blockquote>","frontmatter":{"path":"/hooks","title":"Hooks","order":"4B","section":"Core React Concepts","description":"React manages view state through a mechanism called hooks. Brian teaches you how to use them as you build components."}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"order":"14D","path":"/action-creators","title":"Action Creators"}}},{"node":{"frontmatter":{"order":"3F","path":"/babel","title":"Babel"}}},{"node":{"frontmatter":{"order":"15B","path":"/basic-react-testing","title":"Basic React Testing"}}},{"node":{"frontmatter":{"order":"3G","path":"/browserslist","title":"Browserslist"}}},{"node":{"frontmatter":{"order":"5B","path":"/class-components","title":"Class Components"}}},{"node":{"frontmatter":{"order":"11A","path":"/code-splitting","title":"Code Splitting"}}},{"node":{"frontmatter":{"order":"4F","path":"/component-composition","title":"Component Composition"}}},{"node":{"frontmatter":{"order":"5C","path":"/class-properties","title":"Class Properties"}}},{"node":{"frontmatter":{"order":"2B","path":"/components","title":"Components"}}},{"node":{"frontmatter":{"order":"7A","path":"/conclusion","title":"Conclusion of Complete Intro to React"}}},{"node":{"frontmatter":{"order":"6B","path":"/context","title":"Context"}}},{"node":{"frontmatter":{"order":"10A","path":"/css-and-react","title":"CSS and React"}}},{"node":{"frontmatter":{"order":"4D","path":"/custom-hooks","title":"Custom Hooks"}}},{"node":{"frontmatter":{"order":"16A","path":"/end-of-intermiate","title":"Conclusion of Intermediate React"}}},{"node":{"frontmatter":{"order":"14F","path":"/dispatching-actions","title":"Dispatching Actions"}}},{"node":{"frontmatter":{"order":"6A","path":"/error-boundaries","title":"Error Boundaries"}}},{"node":{"frontmatter":{"order":"3C","path":"/eslint","title":"ESLint"}}},{"node":{"frontmatter":{"order":"3D","path":"/git","title":"Git"}}},{"node":{"frontmatter":{"order":"10D","path":"/grid-and-breakpoints","title":"Grid and Breakpoints"}}},{"node":{"frontmatter":{"order":"4E","path":"/handling-user-input","title":"Handling User Input"}}},{"node":{"frontmatter":{"order":"4B","path":"/hooks","title":"Hooks"}}},{"node":{"frontmatter":{"order":"8A","path":"/intermediate-react-v3","title":"Welcome"}}},{"node":{"frontmatter":{"order":"1A","path":"/intro","title":"Introduction"}}},{"node":{"frontmatter":{"order":"15G","path":"/istanbul","title":"Istanbul"}}},{"node":{"frontmatter":{"order":"4A","path":"/jsx","title":"JSX"}}},{"node":{"frontmatter":{"order":"5D","path":"/managing-state-in-class-components","title":"Managing State in Class Components"}}},{"node":{"frontmatter":{"order":"15E","path":"/mocks","title":"Mocks"}}},{"node":{"frontmatter":{"order":"3A","path":"/npm","title":"npm"}}},{"node":{"frontmatter":{"order":"3E","path":"/parcel","title":"Parcel"}}},{"node":{"frontmatter":{"order":"6C","path":"/portals-and-refs","title":"Portals and Refs"}}},{"node":{"frontmatter":{"order":"10E","path":"/positioning","title":"Positioning"}}},{"node":{"frontmatter":{"order":"3B","path":"/prettier","title":"Prettier"}}},{"node":{"frontmatter":{"order":"14E","path":"/providers","title":"Providers"}}},{"node":{"frontmatter":{"order":"2A","path":"/pure-react","title":"Pure React"}}},{"node":{"frontmatter":{"order":"4G","path":"/react-dev-tools","title":"React Dev Tools"}}},{"node":{"frontmatter":{"order":"5A","path":"/react-router","title":"React Router"}}},{"node":{"frontmatter":{"order":"14B","path":"/reducers","title":"Reducers"}}},{"node":{"frontmatter":{"order":"14G","path":"/redux-dev-tools","title":"Redux Dev Tools"}}},{"node":{"frontmatter":{"order":"14A","path":"/redux-getting-started","title":"Getting Started"}}},{"node":{"frontmatter":{"order":"12A","path":"/server-side-rendering","title":"Server Side Rendering"}}},{"node":{"frontmatter":{"order":"15F","path":"/snapshots","title":"Snapshots"}}},{"node":{"frontmatter":{"order":"12B","path":"/streaming-markup","title":"Streaming Markup"}}},{"node":{"frontmatter":{"order":"10B","path":"/tailwind-basics","title":"Tailwind Basics"}}},{"node":{"frontmatter":{"order":"10C","path":"/tailwind-plugins","title":"Tailwind Plugins"}}},{"node":{"frontmatter":{"order":"15D","path":"/testing-custom-hooks","title":"Testing Custom Hooks"}}},{"node":{"frontmatter":{"order":"15A","path":"/testing-react","title":"Intro to Testing React"}}},{"node":{"frontmatter":{"order":"15C","path":"/testing-ui-interactions","title":"Testing UI Interactions"}}},{"node":{"frontmatter":{"order":"13K","path":"/ts-app","title":"App"}}},{"node":{"frontmatter":{"order":"13F","path":"/ts-carousel","title":"Carousel"}}},{"node":{"frontmatter":{"order":"13D","path":"/ts-details","title":"Details"}}},{"node":{"frontmatter":{"order":"13E","path":"/ts-error-boundary","title":"ErrorBoundary"}}},{"node":{"frontmatter":{"order":"13B","path":"/ts-eslint","title":"TypeScript + ESLint"}}},{"node":{"frontmatter":{"order":"13A","path":"/ts-modal","title":"Modal"}}},{"node":{"frontmatter":{"order":"13G","path":"/ts-pet","title":"Pet"}}},{"node":{"frontmatter":{"order":"13J","path":"/ts-results","title":"Results"}}},{"node":{"frontmatter":{"order":"13I","path":"/ts-searchParams","title":"SearchParams"}}},{"node":{"frontmatter":{"order":"13C","path":"/ts-theme-context","title":"ThemeContext"}}},{"node":{"frontmatter":{"order":"13H","path":"/ts-usebreedlist","title":"useBreedList"}}},{"node":{"frontmatter":{"order":"9G","path":"/usecallback","title":"useCallback"}}},{"node":{"frontmatter":{"order":"9C","path":"/usecontext","title":"useContext"}}},{"node":{"frontmatter":{"order":"9J","path":"/usedebugvalue","title":"useDebugValue"}}},{"node":{"frontmatter":{"order":"9B","path":"/useeffect-2","title":"useEffect"}}},{"node":{"frontmatter":{"order":"4C","path":"/useeffect","title":"useEffect"}}},{"node":{"frontmatter":{"order":"9I","path":"/useimperativehandle","title":"useImperativeHandle"}}},{"node":{"frontmatter":{"order":"9H","path":"/uselayouteffect","title":"useLayoutEffect"}}},{"node":{"frontmatter":{"order":"9F","path":"/usememo","title":"useMemo"}}},{"node":{"frontmatter":{"order":"9E","path":"/usereducer","title":"useReducer"}}},{"node":{"frontmatter":{"order":"9D","path":"/useref","title":"useRef"}}},{"node":{"frontmatter":{"order":"9A","path":"/usestate","title":"useState"}}},{"node":{"frontmatter":{"order":"7B","path":"/ways-to-expand-your-app","title":"Ways to Expand on this Project"}}}]}},"pageContext":{}},
    "staticQueryHashes": ["2959687377"]}