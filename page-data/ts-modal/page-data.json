{
    "componentChunkName": "component---src-templates-lesson-template-js",
    "path": "/ts-modal",
    "result": {"data":{"markdownRemark":{"html":"<blockquote>\n<p>Please start with a fresh copy of this app: <a href=\"https://github.com/btholt/citr-v6-project/tree/master/12-portals-and-refs\">Adopt Me!</a></p>\n</blockquote>\n<p>TypeScript is a thin layer on top of JavaScript that adds the power of a static checker to your code base. This means you'll have another layer of protection helping protect you against dumb bugs like <code class=\"language-text\">var x = 5; x.toUpperCase()</code>: things that a normal linter can't find but a type system can.</p>\n<p>This is going to be a brief intro: how to set it up and get going with it. If you want more TypeScript goodness, check out <a href=\"https://frontendmasters.com/courses/typescript-v2/\">Mike North's course</a>.</p>\n<p>First thing, <code class=\"language-text\">npm install -D typescript@4.2.2</code>. Then run <code class=\"language-text\">npx tsc --init</code>. <code class=\"language-text\">npx</code> will run the TypeScript tool directly from your node_modules and init your project for you. You'll see now a tsconfig.json. We don't need to set up anything else since Parcel already knows how to handle TypeScript files. Open your new <code class=\"language-text\">tsconfig.json</code> file and uncomment the <code class=\"language-text\">jsx</code> field. This lets TypeScript that you're writing React. Then update the target to be <code class=\"language-text\">ES2020</code> so that you can use async / await and promises.</p>\n<p>Next we need to install the types for our project. Not all projects are written in TypeScript so another project, DefinitelyTyped, provides third party types for your library. In order to install these types, run <code class=\"language-text\">npm install -D @types/react@17.0.2 @types/react-dom@17.0.1 @types/react-router-dom@5.1.7</code>. This will grab all these type definitions.</p>\n<p>This is a migration: we're going to migrate one file at a time to being a TypeScript file. As we migrate each file, we'll change it from being a <code class=\"language-text\">.js</code> file to a <code class=\"language-text\">.tsx</code> file. Let's start with Modal.tsx (make sure you rename it to <code class=\"language-text\">.tsx</code>).</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useEffect<span class=\"token punctuation\">,</span> useRef<span class=\"token punctuation\">,</span> MutableRefObject<span class=\"token punctuation\">,</span> FunctionComponent <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createPortal <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> modalRoot <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"modal\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> Modal<span class=\"token operator\">:</span> <span class=\"token function-variable function\">FunctionComponent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> elRef<span class=\"token operator\">:</span> MutableRefObject<span class=\"token operator\">&lt;</span>HTMLDivElement <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>elRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    elRef<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>modalRoot <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>elRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    modalRoot<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>elRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>elRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        modalRoot<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>elRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">createPortal</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> elRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Modal<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Fairly similar. We could have made it so the ref could never potentially be null by instantiating it inside the ref. Yes, this will create a new DOM node every time you render, and no that's probably not a big deal for the most part, but it would bother me and so let's do it the same way we did it before. Now we have do null checks anywhere we access <code class=\"language-text\">elRef.current</code>.</p>\n<p>Then we have to do a null check on modalRoot inside the effect because that could be null too. TypeScript will force you to do this a lot, but it will save you run time errors. Notice we didn't write many types down (just children and the ref type): TypeScript is smart enough to figure out types on its own most of the time.</p>\n<p>Notice we're importing the <code class=\"language-text\">ReactNode</code> and <code class=\"language-text\">MutableRefObject</code> type from React. Types can be exported from libraries and modules. And then we're asserting it's an array of ReactChildren by throwing the <code class=\"language-text\">[]</code> on the end.</p>\n<p>We're also using a generic here. Refs can be one of many things. In this case our generic for the <code class=\"language-text\">MutableRefObject</code> is either <code class=\"language-text\">null</code> or <code class=\"language-text\">HTMLDivElement</code>. This is basically a parameter to the <code class=\"language-text\">MutableRefObject</code> to tell it how to structure itself.</p>","frontmatter":{"path":"/ts-modal","title":"Modal","order":"13A","section":"TypeScript","description":""}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"order":"14D","path":"/action-creators","title":"Action Creators"}}},{"node":{"frontmatter":{"order":"3F","path":"/babel","title":"Babel"}}},{"node":{"frontmatter":{"order":"15B","path":"/basic-react-testing","title":"Basic React Testing"}}},{"node":{"frontmatter":{"order":"3G","path":"/browserslist","title":"Browserslist"}}},{"node":{"frontmatter":{"order":"5B","path":"/class-components","title":"Class Components"}}},{"node":{"frontmatter":{"order":"11A","path":"/code-splitting","title":"Code Splitting"}}},{"node":{"frontmatter":{"order":"4F","path":"/component-composition","title":"Component Composition"}}},{"node":{"frontmatter":{"order":"5C","path":"/class-properties","title":"Class Properties"}}},{"node":{"frontmatter":{"order":"2B","path":"/components","title":"Components"}}},{"node":{"frontmatter":{"order":"7A","path":"/conclusion","title":"Conclusion of Complete Intro to React"}}},{"node":{"frontmatter":{"order":"6B","path":"/context","title":"Context"}}},{"node":{"frontmatter":{"order":"10A","path":"/css-and-react","title":"CSS and React"}}},{"node":{"frontmatter":{"order":"4D","path":"/custom-hooks","title":"Custom Hooks"}}},{"node":{"frontmatter":{"order":"16A","path":"/end-of-intermiate","title":"Conclusion of Intermediate React"}}},{"node":{"frontmatter":{"order":"14F","path":"/dispatching-actions","title":"Dispatching Actions"}}},{"node":{"frontmatter":{"order":"6A","path":"/error-boundaries","title":"Error Boundaries"}}},{"node":{"frontmatter":{"order":"3C","path":"/eslint","title":"ESLint"}}},{"node":{"frontmatter":{"order":"3D","path":"/git","title":"Git"}}},{"node":{"frontmatter":{"order":"10D","path":"/grid-and-breakpoints","title":"Grid and Breakpoints"}}},{"node":{"frontmatter":{"order":"4E","path":"/handling-user-input","title":"Handling User Input"}}},{"node":{"frontmatter":{"order":"4B","path":"/hooks","title":"Hooks"}}},{"node":{"frontmatter":{"order":"8A","path":"/intermediate-react-v3","title":"Welcome"}}},{"node":{"frontmatter":{"order":"1A","path":"/intro","title":"Introduction"}}},{"node":{"frontmatter":{"order":"15G","path":"/istanbul","title":"Istanbul"}}},{"node":{"frontmatter":{"order":"4A","path":"/jsx","title":"JSX"}}},{"node":{"frontmatter":{"order":"5D","path":"/managing-state-in-class-components","title":"Managing State in Class Components"}}},{"node":{"frontmatter":{"order":"15E","path":"/mocks","title":"Mocks"}}},{"node":{"frontmatter":{"order":"3A","path":"/npm","title":"npm"}}},{"node":{"frontmatter":{"order":"3E","path":"/parcel","title":"Parcel"}}},{"node":{"frontmatter":{"order":"6C","path":"/portals-and-refs","title":"Portals and Refs"}}},{"node":{"frontmatter":{"order":"10E","path":"/positioning","title":"Positioning"}}},{"node":{"frontmatter":{"order":"3B","path":"/prettier","title":"Prettier"}}},{"node":{"frontmatter":{"order":"14E","path":"/providers","title":"Providers"}}},{"node":{"frontmatter":{"order":"2A","path":"/pure-react","title":"Pure React"}}},{"node":{"frontmatter":{"order":"4G","path":"/react-dev-tools","title":"React Dev Tools"}}},{"node":{"frontmatter":{"order":"5A","path":"/react-router","title":"React Router"}}},{"node":{"frontmatter":{"order":"14B","path":"/reducers","title":"Reducers"}}},{"node":{"frontmatter":{"order":"14G","path":"/redux-dev-tools","title":"Redux Dev Tools"}}},{"node":{"frontmatter":{"order":"14A","path":"/redux-getting-started","title":"Getting Started"}}},{"node":{"frontmatter":{"order":"12A","path":"/server-side-rendering","title":"Server Side Rendering"}}},{"node":{"frontmatter":{"order":"15F","path":"/snapshots","title":"Snapshots"}}},{"node":{"frontmatter":{"order":"12B","path":"/streaming-markup","title":"Streaming Markup"}}},{"node":{"frontmatter":{"order":"10B","path":"/tailwind-basics","title":"Tailwind Basics"}}},{"node":{"frontmatter":{"order":"10C","path":"/tailwind-plugins","title":"Tailwind Plugins"}}},{"node":{"frontmatter":{"order":"15D","path":"/testing-custom-hooks","title":"Testing Custom Hooks"}}},{"node":{"frontmatter":{"order":"15A","path":"/testing-react","title":"Intro to Testing React"}}},{"node":{"frontmatter":{"order":"15C","path":"/testing-ui-interactions","title":"Testing UI Interactions"}}},{"node":{"frontmatter":{"order":"13K","path":"/ts-app","title":"App"}}},{"node":{"frontmatter":{"order":"13F","path":"/ts-carousel","title":"Carousel"}}},{"node":{"frontmatter":{"order":"13D","path":"/ts-details","title":"Details"}}},{"node":{"frontmatter":{"order":"13E","path":"/ts-error-boundary","title":"ErrorBoundary"}}},{"node":{"frontmatter":{"order":"13B","path":"/ts-eslint","title":"TypeScript + ESLint"}}},{"node":{"frontmatter":{"order":"13A","path":"/ts-modal","title":"Modal"}}},{"node":{"frontmatter":{"order":"13G","path":"/ts-pet","title":"Pet"}}},{"node":{"frontmatter":{"order":"13J","path":"/ts-results","title":"Results"}}},{"node":{"frontmatter":{"order":"13I","path":"/ts-searchParams","title":"SearchParams"}}},{"node":{"frontmatter":{"order":"13C","path":"/ts-theme-context","title":"ThemeContext"}}},{"node":{"frontmatter":{"order":"13H","path":"/ts-usebreedlist","title":"useBreedList"}}},{"node":{"frontmatter":{"order":"9G","path":"/usecallback","title":"useCallback"}}},{"node":{"frontmatter":{"order":"9C","path":"/usecontext","title":"useContext"}}},{"node":{"frontmatter":{"order":"9J","path":"/usedebugvalue","title":"useDebugValue"}}},{"node":{"frontmatter":{"order":"9B","path":"/useeffect-2","title":"useEffect"}}},{"node":{"frontmatter":{"order":"4C","path":"/useeffect","title":"useEffect"}}},{"node":{"frontmatter":{"order":"9I","path":"/useimperativehandle","title":"useImperativeHandle"}}},{"node":{"frontmatter":{"order":"9H","path":"/uselayouteffect","title":"useLayoutEffect"}}},{"node":{"frontmatter":{"order":"9F","path":"/usememo","title":"useMemo"}}},{"node":{"frontmatter":{"order":"9E","path":"/usereducer","title":"useReducer"}}},{"node":{"frontmatter":{"order":"9D","path":"/useref","title":"useRef"}}},{"node":{"frontmatter":{"order":"9A","path":"/usestate","title":"useState"}}},{"node":{"frontmatter":{"order":"7B","path":"/ways-to-expand-your-app","title":"Ways to Expand on this Project"}}}]}},"pageContext":{}},
    "staticQueryHashes": ["2959687377"]}